/******************************************************************************
  Copyright 2016-2017 KNUPATH
  All rights reserved.
  KNUPATH Proprietary and Confidential

  File: pirand.knucpp

  Description: Kernel code for KPI pi estimation example

******************************************************************************/

#include "kpi/kpi_kernel.h"

const float        R         = 1.0;
// Use R ^ 2 to eliminate SQRT function
const float		   R_SQRD	 = R * R;
const unsigned int RAND_MASK = 0x00ffffff;
const float        maxRand   = (float) RAND_MASK;
// Coordinate conversion constants precomputed here
// Original: randNum / maxRand * 2.0 * R - R
// Reduced:  randNum * (2.0 * R / maxRand)- R
const float coordFactor = (2.0 * R) / maxRand;

float getRandCoord()
// Grab a random number, convert it to the range (-R, +R)
{
    float randNum = (float) (KPI_Rand() & RAND_MASK);
    float coord = randNum * coordFactor - R;
    return coord;
}

bool isInCircle(float x, float y)
// Use the distance formula to see if inside or outside the circle
// Reduce the formula to its minimum:
//   d = SQRT (x^2 + y^2)
// 	 d^2 = x^2 + y^2
{
    float dist_sqrd = (x * x) + (y * y);
    return (dist_sqrd <= R_SQRD);
}

// Generate random points within a square and find the ratio of points
// which fall within an inscribed circle
extern "C" __knu_kernel
void piRandRatio(int coordsPerRank)
{
    const int RANK = KPI_Rank();
    const int WORLD_SIZE = KPI_World_Size();

	// Create the packet format
    struct results_struct
    {
    	float pi_estimate;
    	int world_size;
    };

	// KPI_Send_Host() expect an int array, not a struct
	// Use a union to convert between them 
	union host_union
	{
		int int_array[sizeof(results_struct)];
		results_struct return_value;
	} host_pkt;
	
    // Each rank needs a different rand seed
    // Do NOT seed with a zero (rank can be zero, so add 1)
    KPI_Srand(0x314159 * (RANK + 1), 0x314159 * 2 * (RANK + 1), 0x314159 * 3 * (RANK + 1));

    int numInCircle = 0;

    for (int numCoords = 0; numCoords < coordsPerRank; numCoords++)
    {
        // Generate random coordinates within square
        float x = getRandCoord();
        float y = getRandCoord();

        // Count the number of coordinates within an inscribed circle
        if (isInCircle(x, y))
        {
            numInCircle++;
        }
    }

	// Compute the contribution for this kernel
	float ratioInCircle = (float) numInCircle / (float) coordsPerRank;

    if (0 != RANK)
    {
        // All tDSPs except RANK 0 will send the ratio of coordinates
        // within the circle to the "aggregator" at RANK 0
        // Send the ratio to rank 0
        KPI_Send(&ratioInCircle, 1, 0);
    }
    else
    {
        // RANK 0 will collect data from the other tDSPs and send the
        // result to the host.
        // Start with my (rank 0) value
        float     aggRatioInCircle = ratioInCircle;

        // Sum up the resulting ratios of points inside the circle
        // from each kernel
        for (int i = 1; i < WORLD_SIZE; i++)
        {
            KPI_Recv(&ratioInCircle, 1);
            aggRatioInCircle += ratioInCircle;
        }

        // Calculate average ratio of points inside the circle
        aggRatioInCircle /= (float) (WORLD_SIZE);

        // Estimate pi = 4 * (points inside circle) / (total points)
        host_pkt.return_value.pi_estimate = aggRatioInCircle * 4.0;
        
        // Include the world size 
        host_pkt.return_value.world_size = WORLD_SIZE;
        
        // Return the results and the world size
        KPI_Send_Host(host_pkt.int_array, 2, 0);
    }
}
